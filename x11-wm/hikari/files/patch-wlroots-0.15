src/layer_shell.c:202:37: error: no member named 'client_pending' in 'struct wlr_layer_surface_v1'
  layer->layer = wlr_layer_surface->client_pending.layer;
                 ~~~~~~~~~~~~~~~~~  ^

src/layer_shell.c:312:51: error: no member named 'geometry' in 'struct wlr_xdg_surface'
  int popup_sx = popup->geometry.x - popup->base->geometry.x;
                                     ~~~~~~~~~~~  ^
src/layer_shell.c:313:51: error: no member named 'geometry' in 'struct wlr_xdg_surface'
  int popup_sy = popup->geometry.y - popup->base->geometry.y;
                                     ~~~~~~~~~~~  ^

src/output.c:199:5: warning: implicit declaration of function 'wlr_layer_surface_v1_close' is invalid in C99 [-Wimplicit-function-declaration]
    wlr_layer_surface_v1_close(layer->surface);
    ^
src/workspace.c:123:5: warning: implicit declaration of function 'wlr_layer_surface_v1_close' is invalid in C99 [-Wimplicit-function-declaration]
    wlr_layer_surface_v1_close(focus_layer->surface);
    ^

src/view.c:812:47: error: no member named 'subsurfaces_below' in 'struct wlr_surface'
  wl_list_for_each (wlr_subsurface, &surface->subsurfaces_below, parent_link) {
                                     ~~~~~~~  ^
/usr/local/include/wayland-util.h:443:30: note: expanded from macro 'wl_list_for_each'
        for (pos = wl_container_of((head)->next, pos, member);  \
                                    ^~~~
/usr/local/include/wayland-util.h:409:32: note: expanded from macro 'wl_container_of'
        (__typeof__(sample))((char *)(ptr) -                            \
                                      ^~~

src/xdg_view.c:50:30: error: no member named 'configure_serial' in 'struct wlr_xdg_surface'
  uint32_t serial = surface->configure_serial;
                    ~~~~~~~  ^

ld: error: undefined symbol: wlr_backend_get_renderer
>>> referenced by indicator_bar.c
>>>               indicator_bar.o:(hikari_indicator_bar_update)
>>> referenced by lock_indicator.c
>>>               lock_indicator.o:(init_indicator_circle)
>>> referenced by output.c
>>>               output.o:(hikari_output_load_background)
>>> referenced 2 more times

src/server.c:9:10: fatal error: 'wlr/backend/noop.h' file not found
#include <wlr/backend/noop.h>
         ^~~~~~~~~~~~~~~~~~~~

--- include/hikari/server.h.orig	2021-04-09 17:37:23 UTC
+++ include/hikari/server.h
@@ -51,6 +51,7 @@ struct hikari_server {
   struct wl_event_loop *event_loop;
   struct wlr_backend *backend;
   struct wlr_renderer *renderer;
+  struct wlr_allocator *allocator;
   struct wlr_xdg_output_manager_v1 *output_manager;
   struct wlr_data_device_manager *data_device_manager;
 
--- src/indicator_bar.c.orig	2021-04-10 08:38:40 UTC
+++ src/indicator_bar.c
@@ -80,8 +80,7 @@ hikari_indicator_bar_update(struct hikari_indicator_ba
   struct hikari_font *font = &hikari_configuration->font;
   int width = hikari_configuration->font.character_width * len + 8;
   int height = hikari_configuration->font.height;
-  struct wlr_renderer *wlr_renderer =
-      wlr_backend_get_renderer(output->wlr_output->backend);
+  struct wlr_renderer *wlr_renderer = output->wlr_output->renderer;
 
   indicator_bar->width = width;
 
--- src/layer_shell.c.orig	2021-03-28 17:02:57 UTC
+++ src/layer_shell.c
@@ -199,7 +199,7 @@ hikari_layer_init(
   layer->node.focus = focus;
   layer->node.for_each_surface = for_each_surface;
   layer->output = output;
-  layer->layer = wlr_layer_surface->client_pending.layer;
+  layer->layer = wlr_layer_surface->pending.layer;
   layer->surface = wlr_layer_surface;
   layer->mapped = false;
 
@@ -309,8 +309,8 @@ damage_popup(struct hikari_layer_popup *layer_popup, b
   struct wlr_xdg_popup *popup = layer_popup->popup;
   struct wlr_surface *surface = popup->base->surface;
 
-  int popup_sx = popup->geometry.x - popup->base->geometry.x;
-  int popup_sy = popup->geometry.y - popup->base->geometry.y;
+  int popup_sx = popup->geometry.x - popup->base->current.geometry.x;
+  int popup_sy = popup->geometry.y - popup->base->current.geometry.y;
   int ox = popup_sx, oy = popup_sy;
 
   struct hikari_layer *layer;
--- src/lock_indicator.c.orig	2021-04-10 11:39:20 UTC
+++ src/lock_indicator.c
@@ -19,8 +19,7 @@ init_indicator_circle(float color[static 4])
   const int size = 100;
 
   struct wlr_texture *texture;
-  struct wlr_renderer *wlr_renderer =
-      wlr_backend_get_renderer(hikari_server.backend);
+  struct wlr_renderer *wlr_renderer = hikari_server.renderer;
 
   cairo_surface_t *surface =
       cairo_image_surface_create(CAIRO_FORMAT_ARGB32, size, size);
--- src/output.c.orig	2021-07-20 21:52:59 UTC
+++ src/output.c
@@ -84,8 +84,7 @@ hikari_output_load_background(struct hikari_output *ou
   unsigned char *data = cairo_image_surface_get_data(output_surface);
   int stride = cairo_format_stride_for_width(CAIRO_FORMAT_ARGB32, output_width);
 
-  struct wlr_renderer *renderer =
-      wlr_backend_get_renderer(output->wlr_output->backend);
+  struct wlr_renderer *renderer = output->wlr_output->renderer;
 
   output->background = wlr_texture_from_pixels(
       renderer, DRM_FORMAT_ARGB8888, stride, output_width, output_height, data);
@@ -196,7 +195,7 @@ close_layers(struct wl_list *layers)
 {
   struct hikari_layer *layer, *layer_temp;
   wl_list_for_each_safe (layer, layer_temp, layers, layer_surfaces) {
-    wlr_layer_surface_v1_close(layer->surface);
+    wlr_layer_surface_v1_destroy(layer->surface);
     layer->output = NULL;
   }
 }
@@ -257,7 +256,7 @@ hikari_output_init(struct hikari_output *output, struc
 
     if (!wl_list_empty(&wlr_output->modes)) {
       struct wlr_output_mode *mode =
-          wl_container_of(wlr_output->modes.prev, mode, link);
+          wl_container_of(wlr_output->modes.next, mode, link);
       wlr_output_set_mode(wlr_output, mode);
     }
 
--- src/renderer.c.orig	2021-03-28 17:02:57 UTC
+++ src/renderer.c
@@ -487,8 +487,7 @@ static inline void
 render_output(struct hikari_output *output, pixman_region32_t *damage)
 {
   struct wlr_output *wlr_output = output->wlr_output;
-  struct wlr_renderer *wlr_renderer =
-      wlr_backend_get_renderer(wlr_output->backend);
+  struct wlr_renderer *wlr_renderer = wlr_output->renderer;
 
   struct hikari_renderer renderer = {
     .wlr_output = wlr_output, .wlr_renderer = wlr_renderer, .damage = damage
--- src/server.c.orig	2021-07-20 21:52:59 UTC
+++ src/server.c
@@ -5,9 +5,11 @@
 #include <unistd.h>
 
 #include <wlr/backend.h>
+#include <wlr/backend/headless.h>
 #include <wlr/backend/libinput.h>
-#include <wlr/backend/noop.h>
 #include <wlr/backend/session.h>
+#include <wlr/render/allocator.h>
+#include <wlr/render/wlr_renderer.h>
 #include <wlr/types/wlr_compositor.h>
 #include <wlr/types/wlr_data_control_v1.h>
 #include <wlr/types/wlr_data_device.h>
@@ -213,6 +215,10 @@ new_output_handler(struct wl_listener *listener, void 
   struct wlr_output *wlr_output = data;
   struct hikari_output *output = hikari_malloc(sizeof(struct hikari_output));
 
+  if (!wlr_output_init_render(wlr_output, server->allocator, server->renderer)) {
+    exit(EXIT_FAILURE);
+  }
+
   hikari_output_init(output, wlr_output);
   hikari_cursor_reset_image(&server->cursor);
 }
@@ -766,9 +772,9 @@ done:
 static void
 init_noop_output(struct hikari_server *server)
 {
-  server->noop_backend = wlr_noop_backend_create(server->display);
+  server->noop_backend = wlr_headless_backend_create(server->display);
 
-  struct wlr_output *wlr_output = wlr_noop_add_output(server->noop_backend);
+  struct wlr_output *wlr_output = wlr_headless_add_output(server->noop_backend, 800, 600);
   struct hikari_output *noop_output =
       hikari_malloc(sizeof(struct hikari_output));
 
@@ -816,14 +822,19 @@ server_init(struct hikari_server *server, char *config
 
   signal(SIGPIPE, SIG_IGN);
 
-  server->renderer = wlr_backend_get_renderer(server->backend);
-
+  server->renderer = wlr_renderer_autocreate(server->backend);
   if (server->renderer == NULL) {
     wl_display_destroy(server->display);
     exit(EXIT_FAILURE);
   }
 
   wlr_renderer_init_wl_display(server->renderer, server->display);
+
+  server->allocator = wlr_allocator_autocreate(server->backend, server->renderer);
+  if (server->allocator == NULL) {
+    wl_display_destroy(server->display);
+    exit(EXIT_FAILURE);
+  }
 
   server->socket = wl_display_add_socket_auto(server->display);
   if (server->socket == NULL) {
--- src/view.c.orig	2021-07-20 21:52:59 UTC
+++ src/view.c
@@ -809,13 +809,13 @@ hikari_view_map(struct hikari_view *view, struct wlr_s
   wl_signal_add(&surface->events.new_subsurface, &view->new_subsurface);
 
   struct wlr_subsurface *wlr_subsurface;
-  wl_list_for_each (wlr_subsurface, &surface->subsurfaces_below, parent_link) {
+  wl_list_for_each (wlr_subsurface, &surface->current.subsurfaces_below, current.link) {
     struct hikari_view_subsurface *subsurface =
         (struct hikari_view_subsurface *)malloc(
             sizeof(struct hikari_view_subsurface));
     hikari_view_subsurface_init(subsurface, view, wlr_subsurface);
   }
-  wl_list_for_each (wlr_subsurface, &surface->subsurfaces_above, parent_link) {
+  wl_list_for_each (wlr_subsurface, &surface->current.subsurfaces_above, current.link) {
     struct hikari_view_subsurface *subsurface =
         (struct hikari_view_subsurface *)malloc(
             sizeof(struct hikari_view_subsurface));
@@ -1695,10 +1695,10 @@ hikari_view_child_init(struct hikari_view_child *view_
   wl_list_insert(&parent->children, &view_child->link);
 
   struct wlr_subsurface *subsurface;
-  wl_list_for_each (subsurface, &surface->subsurfaces_below, parent_link) {
+  wl_list_for_each (subsurface, &surface->current.subsurfaces_below, current.link) {
     view_subsurface_create(subsurface, parent);
   }
-  wl_list_for_each (subsurface, &surface->subsurfaces_above, parent_link) {
+  wl_list_for_each (subsurface, &surface->current.subsurfaces_above, current.link) {
     view_subsurface_create(subsurface, parent);
   }
 }
--- src/workspace.c.orig	2021-04-09 17:37:23 UTC
+++ src/workspace.c
@@ -120,7 +120,7 @@ hikari_workspace_quit_view(struct hikari_workspace *wo
 
   if (focus_layer != NULL) {
     assert(focus_view == NULL);
-    wlr_layer_surface_v1_close(focus_layer->surface);
+    wlr_layer_surface_v1_destroy(focus_layer->surface);
     return;
   }
 #endif
--- src/xdg_view.c.orig	2021-03-28 17:02:57 UTC
+++ src/xdg_view.c
@@ -47,7 +47,7 @@ commit_handler(struct wl_listener *listener, void *dat
 
   struct hikari_view *view = (struct hikari_view *)xdg_view;
   struct wlr_xdg_surface *surface = xdg_view->surface;
-  uint32_t serial = surface->configure_serial;
+  uint32_t serial = surface->current.configure_serial;
 
   assert(view->surface != NULL);
 

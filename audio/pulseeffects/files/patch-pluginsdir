--- include/pipeline_base.hpp.orig	2018-12-24 07:32:52 UTC
+++ include/pipeline_base.hpp
@@ -67,6 +67,8 @@ class PipelineBase {
   void set_caps(const uint& sampling_rate);
   void init_spectrum_bin();
   void init_effects_bin();
+
+  GstElement* get_required_plugin(const gchar* factoryname, const gchar* name);
 };
 
 #endif
--- meson.build.orig	2018-12-03 22:11:27 UTC
+++ meson.build
@@ -30,6 +30,7 @@ conf.set_quoted('GETTEXT_PACKAGE', meson.project_name(
 conf.set_quoted('LOCALE_DIR', localedir)
 conf.set_quoted('VERSION', meson.project_version())
 conf.set_quoted('PACKAGE', 'PulseEffects')
+conf.set_quoted('PLUGINS_INSTALL_DIR', join_paths(prefix, plugins_install_dir))
 
 configure_file(output: 'config.h', configuration: conf)
 
--- src/pipeline_base.cpp.orig	2018-12-03 22:11:27 UTC
+++ src/pipeline_base.cpp
@@ -1,10 +1,11 @@
+#include "pipeline_base.hpp"
 #include <glib-object.h>
 #include <gobject/gvaluecollector.h>
 #include <algorithm>
 #include <boost/math/interpolators/cubic_b_spline.hpp>
 #include <cmath>
 #include <mutex>
-#include "pipeline_base.hpp"
+#include "config.h"
 #include "util.hpp"
 
 namespace {
@@ -207,17 +208,19 @@ PipelineBase::PipelineBase(const std::string& tag, con
 
   // creating elements common to all pipelines
 
-  source = gst_element_factory_make("pulsesrc", "source");
-  capsfilter = gst_element_factory_make("capsfilter", nullptr);
-  adapter = gst_element_factory_make("peadapter", nullptr);
-  sink = gst_element_factory_make("pulsesink", "sink");
-  spectrum = gst_element_factory_make("spectrum", "spectrum");
+  gst_registry_scan_path(gst_registry_get(), PLUGINS_INSTALL_DIR);
 
-  auto queue_src = gst_element_factory_make("queue", nullptr);
-  auto src_type = gst_element_factory_make("typefind", nullptr);
-  auto audioconvert_in = gst_element_factory_make("audioconvert", nullptr);
-  auto audioconvert_out = gst_element_factory_make("audioconvert", nullptr);
+  source = get_required_plugin("pulsesrc", "source");
+  capsfilter = get_required_plugin("capsfilter", nullptr);
+  adapter = get_required_plugin("peadapter", nullptr);
+  sink = get_required_plugin("pulsesink", "sink");
+  spectrum = get_required_plugin("spectrum", "spectrum");
 
+  auto queue_src = get_required_plugin("queue", nullptr);
+  auto src_type = get_required_plugin("typefind", nullptr);
+  auto audioconvert_in = get_required_plugin("audioconvert", nullptr);
+  auto audioconvert_out = get_required_plugin("audioconvert", nullptr);
+
   init_spectrum_bin();
   init_effects_bin();
 
@@ -376,7 +379,7 @@ void PipelineBase::set_null_pipeline() {
   gst_element_get_state(pipeline, &state, &pending, state_check_timeout);
 
   /*on_message_state is not called when going to null. I don't know why.
-   *so we have to update the variable manually after setting to null.
+   * so we have to update the variable manually after setting to null.
    */
 
   if (state == GST_STATE_NULL) {
@@ -582,4 +585,15 @@ std::array<double, 2> PipelineBase::get_peak(GstMessag
   }
 
   return peak;
+}
+
+GstElement* PipelineBase::get_required_plugin(const gchar* factoryname,
+                                              const gchar* name) {
+  GstElement* plugin = gst_element_factory_make(factoryname, name);
+
+  if (!plugin)
+    throw std::runtime_error(
+        log_tag + std::string("Failed to get required plugin: ") + factoryname);
+
+  return plugin;
 }
